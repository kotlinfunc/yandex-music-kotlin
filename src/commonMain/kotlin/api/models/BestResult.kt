/**
 * Yandex Music Api
 *
 * Swagger документация для Yandex Music API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Album
import org.openapitools.client.models.AlbumLabelsInner
import org.openapitools.client.models.Artist
import org.openapitools.client.models.Owner
import org.openapitools.client.models.Playlist
import org.openapitools.client.models.PlaylistTagsInner
import org.openapitools.client.models.Track
import org.openapitools.client.models.TrackItem
import org.openapitools.client.models.TrackNormalization
import org.openapitools.client.models.Video

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param albums 
 * @param artists Артисты
 * @param available 
 * @param availableForPremiumUsers Доступен ли альбом для пользователей с подпиской
 * @param availableFullWithoutPermission 
 * @param coverUri Ссылка на обложку
 * @param durationMs 
 * @param fileSize 
 * @param id Идентификатор альбома
 * @param lyricsAvailable 
 * @param major 
 * @param normalization 
 * @param ogImage 
 * @param previewDurationMs 
 * @param realId 
 * @param rememberPosition 
 * @param storageDir 
 * @param title Название видео
 * @param type Тип альбома
 * @param composer 
 * @param cover Ссылка на изображение
 * @param decomposed 
 * @param genres 
 * @param name 
 * @param various 
 * @param popularTracks 
 * @param ticketsAvailable Имеются ли в продаже билеты на концерт
 * @param regions 
 * @param error Ошибка получения альбома
 * @param metaType Мета тип
 * @param year Год релиза
 * @param releaseDate Дата релиза в формате ISO 8601
 * @param genre Жанр музыки
 * @param buy 
 * @param trackCount 
 * @param recent Является ли альбом новым
 * @param veryImportant Популярен ли альбом у слушателей
 * @param labels Лейблы
 * @param availableForMobile Доступен ли альбом из приложения для телефона
 * @param availablePartially Доступен ли альбом частично для пользователей без подписки
 * @param bests ID лучших треков альбома
 * @param prerolls 
 * @param volumes Треки альбома, разделенные по дискам.
 * @param playlistUuid 
 * @param description 
 * @param descriptionFormatted 
 * @param collective 
 * @param created 
 * @param modified 
 * @param backgroundColor 
 * @param textColor 
 * @param isBunner 
 * @param isPremiere 
 * @param kind 
 * @param owner 
 * @param revision 
 * @param snapshot 
 * @param tags 
 * @param uid 
 * @param visibility 
 * @param likesCount 
 * @param tracks 
 * @param embedUrl Ссылка на видео
 * @param provider Сервис поставляющий видео
 * @param providerVideoId Уникальный идентификатор видео на сервисе.
 * @param youtubeUrl Ссылка на видео Youtube
 * @param thumbnailUrl Ссылка на изображение
 * @param duration Длительность видео в секундах
 * @param text Текст
 * @param htmlAutoPlayVideoPlayer HTML тег для встраивания в разметку страницы
 */
@Serializable
data class BestResult (

    @SerialName(value = "albums") val albums: kotlin.collections.List<Album>? = null,

    /* Артисты */
    @SerialName(value = "artists") val artists: kotlin.collections.List<Artist>? = null,

    @SerialName(value = "available") val available: kotlin.Boolean? = null,

    /* Доступен ли альбом для пользователей с подпиской */
    @SerialName(value = "availableForPremiumUsers") val availableForPremiumUsers: kotlin.Boolean? = null,

    @SerialName(value = "availableFullWithoutPermission") val availableFullWithoutPermission: kotlin.Boolean? = null,

    /* Ссылка на обложку */
    @SerialName(value = "coverUri") val coverUri: kotlin.String? = null,

    @SerialName(value = "durationMs") val durationMs: kotlin.Double? = null,

    @SerialName(value = "fileSize") val fileSize: kotlin.Double? = null,

    /* Идентификатор альбома */
    @SerialName(value = "id") val id: kotlin.Double? = null,

    @SerialName(value = "lyricsAvailable") val lyricsAvailable: kotlin.Boolean? = null,

    @SerialName(value = "major") val major: AlbumLabelsInner? = null,

    @SerialName(value = "normalization") val normalization: TrackNormalization? = null,

    @SerialName(value = "ogImage") val ogImage: kotlin.String? = null,

    @SerialName(value = "previewDurationMs") val previewDurationMs: kotlin.Double? = null,

    @SerialName(value = "realId") val realId: kotlin.String? = null,

    @SerialName(value = "rememberPosition") val rememberPosition: kotlin.Boolean? = null,

    @SerialName(value = "storageDir") val storageDir: kotlin.String? = null,

    /* Название видео */
    @SerialName(value = "title") val title: kotlin.String? = null,

    /* Тип альбома */
    @SerialName(value = "type") val type: BestResult.Type? = null,

    @SerialName(value = "composer") val composer: kotlin.Boolean? = null,

    /* Ссылка на изображение */
    @SerialName(value = "cover") val cover: kotlin.String? = null,

    @SerialName(value = "decomposed") val decomposed: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "genres") val genres: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "name") val name: kotlin.String? = null,

    @SerialName(value = "various") val various: kotlin.Boolean? = null,

    @SerialName(value = "popularTracks") val popularTracks: kotlin.collections.List<Track>? = null,

    /* Имеются ли в продаже билеты на концерт */
    @SerialName(value = "ticketsAvailable") val ticketsAvailable: kotlin.Boolean? = null,

    @SerialName(value = "regions") val regions: kotlin.collections.List<kotlin.String>? = null,

    /* Ошибка получения альбома */
    @SerialName(value = "error") val error: kotlin.String? = null,

    /* Мета тип */
    @SerialName(value = "metaType") val metaType: BestResult.MetaType? = null,

    /* Год релиза */
    @SerialName(value = "year") val year: kotlin.Double? = null,

    /* Дата релиза в формате ISO 8601 */
    @SerialName(value = "releaseDate") val releaseDate: kotlin.String? = null,

    /* Жанр музыки */
    @SerialName(value = "genre") val genre: kotlin.String? = null,

    @SerialName(value = "buy") val buy: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "trackCount") val trackCount: kotlin.Double? = null,

    /* Является ли альбом новым */
    @SerialName(value = "recent") val recent: kotlin.Boolean? = null,

    /* Популярен ли альбом у слушателей */
    @SerialName(value = "veryImportant") val veryImportant: kotlin.Boolean? = null,

    /* Лейблы */
    @SerialName(value = "labels") val labels: kotlin.collections.List<AlbumLabelsInner>? = null,

    /* Доступен ли альбом из приложения для телефона */
    @SerialName(value = "availableForMobile") val availableForMobile: kotlin.Boolean? = null,

    /* Доступен ли альбом частично для пользователей без подписки */
    @SerialName(value = "availablePartially") val availablePartially: kotlin.Boolean? = null,

    /* ID лучших треков альбома */
    @SerialName(value = "bests") val bests: kotlin.collections.List<kotlin.Double>? = null,

    @SerialName(value = "prerolls") val prerolls: kotlin.collections.List<kotlin.String>? = null,

    /* Треки альбома, разделенные по дискам. */
    @SerialName(value = "volumes") val volumes: kotlin.collections.List<kotlin.collections.List<Track>>? = null,

    @SerialName(value = "playlistUuid") val playlistUuid: kotlin.String? = null,

    @SerialName(value = "description") val description: kotlin.String? = null,

    @SerialName(value = "descriptionFormatted") val descriptionFormatted: kotlin.String? = null,

    @SerialName(value = "collective") val collective: kotlin.Boolean? = null,

    @SerialName(value = "created") val created: kotlin.String? = null,

    @SerialName(value = "modified") val modified: kotlin.String? = null,

    @SerialName(value = "backgroundColor") val backgroundColor: kotlin.String? = null,

    @SerialName(value = "textColor") val textColor: kotlin.String? = null,

    @SerialName(value = "isBunner") val isBunner: kotlin.Boolean? = null,

    @SerialName(value = "isPremiere") val isPremiere: kotlin.Boolean? = null,

    @SerialName(value = "kind") val kind: kotlin.Double? = null,

    @SerialName(value = "owner") val owner: Owner? = null,

    @SerialName(value = "revision") val revision: kotlin.Double? = null,

    @SerialName(value = "snapshot") val snapshot: kotlin.Double? = null,

    @SerialName(value = "tags") val tags: kotlin.collections.List<PlaylistTagsInner>? = null,

    @SerialName(value = "uid") val uid: kotlin.Double? = null,

    @SerialName(value = "visibility") val visibility: BestResult.Visibility? = null,

    @SerialName(value = "likesCount") val likesCount: kotlin.Double? = null,

    @SerialName(value = "tracks") val tracks: kotlin.collections.List<TrackItem>? = null,

    /* Ссылка на видео */
    @SerialName(value = "embedUrl") val embedUrl: kotlin.String? = null,

    /* Сервис поставляющий видео */
    @SerialName(value = "provider") val provider: kotlin.String? = null,

    /* Уникальный идентификатор видео на сервисе. */
    @SerialName(value = "providerVideoId") val providerVideoId: kotlin.String? = null,

    /* Ссылка на видео Youtube */
    @SerialName(value = "youtubeUrl") val youtubeUrl: kotlin.String? = null,

    /* Ссылка на изображение */
    @SerialName(value = "thumbnailUrl") val thumbnailUrl: kotlin.String? = null,

    /* Длительность видео в секундах */
    @SerialName(value = "duration") val duration: kotlin.Double? = null,

    /* Текст */
    @SerialName(value = "text") val text: kotlin.String? = null,

    /* HTML тег для встраивания в разметку страницы */
    @SerialName(value = "htmlAutoPlayVideoPlayer") val htmlAutoPlayVideoPlayer: kotlin.String? = null

) {

    /**
     * Тип альбома
     *
     * Values: single,podcast
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "single") single("single"),
        @SerialName(value = "podcast") podcast("podcast");
    }
    /**
     * Мета тип
     *
     * Values: single,podcast,music
     */
    @Serializable
    enum class MetaType(val value: kotlin.String) {
        @SerialName(value = "single") single("single"),
        @SerialName(value = "podcast") podcast("podcast"),
        @SerialName(value = "music") music("music");
    }
    /**
     * 
     *
     * Values: `public`,`private`
     */
    @Serializable
    enum class Visibility(val value: kotlin.String) {
        @SerialName(value = "public") `public`("public"),
        @SerialName(value = "private") `private`("private");
    }
}

